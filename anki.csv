问题,答案
"内核态和用户态有什么区别？","区别：  
- 运行级别  
- 是否可以操作硬件  

用户态->内核态的切换方式：  
- 系统调用  
- 异常  
- 外围设备中断"
"进程和线程的主要区别是什么？**","**
1. **地址**  
   - 进程是资源分配的最小单位，线程是CPU调度的最小单位，进程有独立分配的内存空间，线程共享进程空间  
   - 真正在CPU上运行的是线程  

2. **开销**  
   - 进程切换开销大，线程轻量级  

3. **并发性**  
   - 进程并发性差  

4. **崩溃**  
   - 线程的崩溃不一定导致进程的崩溃  
   - 线程在进程下行进（单纯的车厢无法运行）  
   - 一个进程可以包含多个线程（一辆火车可以有多个车厢）  
   - 不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）  
   - 同一进程下不同线程间数据很易共享（A车厢换到B车厢很容易）  
   - 进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源）  
   - 进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响另外一列火车，但如果一列火车上中间的一节车厢着火了，将影响到所有车厢）  
   - 进程可以拓展到多机，进程最多适合多核（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上）  
   - 进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（比如洗手间）－""互斥锁""  
   - 进程使用的内存地址可以限定使用量（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－“信号量”  

5. **资源占用**  
   - 每个进程都有独立的内存空间，包括代码、数据、堆栈等，而线程共享所属进程的内存空间。因此，在创建、切换和销毁进程时，涉及到较大的资源开销，而线程切换和创建时的开销较小。  

6. **并发性**  
   - 进程是独立运行的执行单位，多个进程之间可以并发，每个进程都有自己的执行状态、程序计数器和堆栈指针等。线程是进程内的执行流，多个线程共享进程的资源，在同一进程中的个线程可以并发执行。  

7. **通信和同步**  
   - 进程间的通信比较复杂，需要通过特定的机制（如管道、消息队列、等）进行数据的传递和共享。而线程之间共享进程的资源，通信相对容易，可以直接访问共享的内存变量。在多线程编程中，线程之间需要通过同步机制（如锁、信号量、条件变量等）来保证数据的一致性和正确性。  

8. **安全性**  
   - 由于线程共享进程的资源，多个线程之间对共享数据的访问需要进行同步控制，否则可能会出现竞争条件（Race Condition）和数据不一致的问题。相比之下，进程间的数据相对独立，每个进程拥有独立的内存空间，更加安全。  

---"
"什么时候应该使用进程，什么时候应该使用线程？","多进程：  
- 优点：进程独立，不影响主程序稳定性，可多CPU运行  
- 缺点：逻辑复杂，IPC通信困难，调度开销大  

多线程：  
- 优点：线程间通信方便，资源开销小，程序逻辑简单  
- 缺点：线程间独立互斥困难，线程崩溃影响进程  

选择原则：  
- 频繁创建的用线程  
- CPU密集用进程  
- IO密集用线程  

**总结：安全稳定选进程，快速频繁选线程**"
"为什么进程切换比线程切换慢？","- 进程切换涉及到页表的切换，页表的切换实质上导致TLB的缓存全部失效，这些寄存器里的内容需要全部重写。而线程切换无需经历此步骤。  
- 线程切换涉及到线程栈"
"一个进程可以创建多少个线程？","（可用虚拟空间和线程的栈的大小共同决定）  
一个进程可用虚拟空间是2G，默认情况下，线程的栈的大小是1MB，所以理论上最多只能创建2048个线程"
"冯诺依曼体系结构由哪些硬件部分组成？","计算机硬件由运算器、控制器、存储器、输入设备和输出设备五大部分组成"
"ARM架构与x86架构的主要区别是什么？","- **指令集**  
  - ARM：精简指令集RISC  
  - X86：复杂指令集CISC  
- **功耗**  
  - ARM：主要面向低功耗  
  - X86：通过制程弥补功耗劣势  
- **性能**  
  - ARM：低性能，顺序执行能力强，流水线指令集，主频低于1G  
  - X86：高性能，乱序执行能力强，主频高"
"什么是CPU的流水线（Pipeline）技术？","CPU的流水线（Pipeline）是一种提高处理器执行效率的技术，将指令执行过程划分为多个阶段，并使多个指令在不同阶段之间并行执行，从而实现指令级并行。"
