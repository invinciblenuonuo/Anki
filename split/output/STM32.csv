问题,答案
"STM32看门狗的作用是什么？","定时喂狗，否则触发系统复位"
"中断和异常有什么相同点和区别？","相同点：都是CPU对系统发生的某个事情做出的一种反应  
区别：中断由外因引起，异常由CPU本身原因引起  
![img](https://obsidian-1321127127.cos.ap-beijing.myqcloud.com/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5OTk2Mjg1,size_16,color_FFFFFF,t_70.png)"
"STM32定时器有哪些类型及其特点？","- **系统滴答定时器** `SysTick`（并非外设，CM3内核）  
- **看门狗定时器** `WatchDog`  
- **基本定时器** `TIM6,TIM7`  
- **通用定时器** `TIM2,TIM3,TIM4,TIM5`（支持功能：输出比较、输入捕获、PWM、单脉冲）  
- **高级定时器** `TIM1,TIM8`（支持功能：死区控制）  

**关键寄存器说明**：  
- **基本定时**：预分频、重装载寄存器  
- **PWM**：预分频、重装载、比较寄存器"
"请列出STM32F407IGH6、STM32L151RET6、STM32F103C8T6和HC32L130E8PA的主频、Flash、SRAM大小以及内核信息。","| 类型          | 主频 | Flash  | RAM   | 内核 |  
| ------------- | ---- | ------ | ----- | ---- |  
| STM32F407IGH6 | 168M | 1024KB | 192KB | M4   |  
| STM32L151RET6 | 32M  | 512KB  | 80KB  | M3   |  
| STM32F103C8T6 | 72M  | 64KB   | 20KB  | M3   |  
| HC32L130E8PA  | 48M  | 64KB   | 8KB   | M0+  |"
"IO口类型有哪些？它们的特点和用途分别是什么？","| 分类     | 电平                                                         | 用途       | 备注                                                         |
| -------- | ------------------------------------------------------------ | ---------- | ------------------------------------------------------------ |
| 上拉输入 | 常态高电平（上拉电阻连接VCC）                                | IO读取     |                                                              |
| 下拉输入 | 常态低电平（下拉电阻连接GND）                                | IO读取     |                                                              |
| 推挽输出 | 可以输出高电平和低电平，都有较强驱动能力，IO输出0-接GND， IO输出1 -接VCC | 一般IO输出 | 驱动负载能力强                                               |
| 开漏输出 | 只能输出低电平，高电平没有驱动能力，需要外部上拉电阻才能真正输出高电平 | 线与功能   | 像IIC中，只要有一个给低电平，那么总线都会被拉低。实现线与功能 |"
"ADC采样中的逐次逼近转换过程与什么日常现象相似？其工作原理是怎样的？","逐次逼近转换过程和用天平称物重非常相似。  
天平称重物过程是：  
1. 从最重的砝码开始试放，与被称物体进行比较  
2. 若物体重于砝码，则该砝码保留，否则移去  
3. 再加上第二个次重砝码，由物体的重量是否大于砝码的重量决定第二个砝码是留下还是移去  
4. 照此一直加到最小一个砝码为止  
5. 将所有留下的砝码重量相加，就得此物体的重量  

仿照这一思路：  
逐次比较型A/D转换器就是将输入模拟信号与不同的参考电压作多次比较，使转换所得的数字量在数值上逐次逼近输入模拟量对应值。  

![25999089-20433dbc3f0a1fe5.png](https://obsidian-1321127127.cos.ap-beijing.myqcloud.com/25999089-20433dbc3f0a1fe5.png)"
"什么是STM32中断？","定义：正在执行某事件时，被某事件打断，造成任务切换。"
"中断的过程是怎样的？","中断的过程包括以下几个步骤：  

1. **中断初始化**  
   - 设置中断源，让某个外设可以产生中断；  
   - 设置中断控制器，使能/屏蔽某个外设的中断通道，设置中断优先级等；  
   - 使能CPU中断总开关。  

2. **CPU运行正常程序**  
   - 产生中断（例如用户按下了按键）→ 中断控制器 → CPU。  
   - **CPU每执行完一条指令（指令有多个时钟周期，取指、译码、执行等）都会检查是否有异常/中断产生**。  

3. **处理中断**  
   - 发现有异常/中断产生，开始处理：  
     1. 保存现场（PC、LR、MSP、通用寄存器、FPU压栈）；  
     2. 分辨异常/中断，调用对应的异常/中断处理函数；  
     3. 恢复现场（PC与出栈）。  

4. **中断优先级**  
   - 在执行高优先级中断时，如果低优先级中断到来，低优先级中断不会被丢失。  

5. **异常向量表**  
   - 当中断发生时，PC设置为一个特定地址，这一地址按优先级排列就称为异常向量表。"
"STM32F1 ADC的基本特性是什么？","- STM32F1 ADC的精度为12位。  
- 每个ADC最多有16个外部通道。  
- 各通道的A/D转换可以单次、连续扫描或间断执行。  
- ADC转换的结果（6-12位）可以左对齐或右对齐储存在16位数据寄存器中。  
- ADC的输入时钟不得超过14MHz，其时钟频率由PCLK2分频产生。"
"ARM汇编中LDR指令的作用和使用方法是什么？","```assembly
LDR #从存储器中将一个32位的字数据传送到目的寄存器中。该指令通常用于从存储器中读取32位的字数据到通用寄存器，然后对数据进行处理。
LDR  R0,[R1]           # 将存储器地址为R1的字数据读入寄存器R0
LDR  R0,[R1, #8]        // 将存储器地址为R1+8的字数据读入寄存器R0
LDR  R1,  [R0,#0x12] # 将R0+0x12 地址处的数据读出，保存到R1中(R0 的值不变)
LDR  R1,  [R0,R2] # 将R0+R2 地址的数据计读出，保存到R1中(R0 的值不变)
```"
"什么是STM32的DMA？","DMA（直接存储器访问）是一种允许外部设备（如硬盘、显卡、网络适配器等）与主存储器直接进行数据交换的技术，无需通过CPU作为中介。在大量数据传输时，这种方式可以避免CPU过度参与数据传输，从而提升整体性能。"
"STM32如何通过boot引脚选择启动区域？","1. 依据boot引脚选择启动区域  

| 引脚 | 启动方式   | 描述                                           |  
| ---- | ---------- | ---------------------------------------------- |  
| x 0  | 片内Flash  | 代码区启动，ICP下载（SWD、JTAG烧录）           |  
| 0 1  | 系统存储器 | 内置ROM启动，ISP下载（出厂预置代码，UART烧录） |  
| 1 1  | SRAM       | RAM启动，掉电丢失                              |  

---"
