问题,答案
"浏览器从输入 URL 开始到页面显示内容，中间发生了什么？","1. DNS解析域名，获取ip端口  
2. 建立tcp链接  
3. http发送请求  
4. 服务器处理请求  
5. 服务器端返回数据  
6. 浏览器解析html  
7. 浏览器布局渲染"
"什么是TCP粘包？","TCP基于字节流，无法判断发送方报文段边界  
造成粘包的因素有很多，有可能是发送方造成的，也有可能是接收方造成的。比如接收方在接收缓存中读取数据不及时，在下一个数据包到达之前没有读取上一个，可能也会造成读取到超过一个数据包的情况。多个数据包被连续存储于连续的缓存中，在对数据包进行读取时由于无法确定发生方的发送边界  
发送端可能堆积了两次数据，每次100字节一共在发送缓存堆积了200字节的数据，而接收方在接收缓存中一次读取120字节的数据，这时候接收端读取的数据中就包括了下一个报文段的头部，造成了粘包。"
"TCP和UDP的主要区别是什么？它们各自适用于哪些场景？","- **TCP**  
  - 提供面向连接的可靠传输。  
  - 需要三次握手和四次挥手建立/断开连接。  
  - 单播（只能端对端连接）。  
  - 可靠交付（通过确认、窗口、重传、拥塞控制等机制保障）。  
  - 全双工通信（允许双方同时发送信息）。  
  - 面向字节流（不保留数据报边界，以字节流传输）。  
  - 头部开销大（最少20字节）。  
  **优点**：可靠、稳定，适合对数据准确性要求高、速度无硬性要求的场景（如FTP、HTTP/HTTPS）。  
  **缺点**：效率低，占用资源多，维护连接消耗时间。  

- **UDP**  
  - 提供面向无连接的不可靠传输。  
  - 无需握手和挥手。  
  - 尽最大努力交付，面向报文（每次收发一整个报文段）。  
  - 无拥塞控制，不可靠（只管发送，不保证结果）。  
  - 支持一对一、一对多、多对一和多对多通信，首部开销小（8字节）。  
  **优点**：速度快，节省网络资源，适合实时性要求高的场景（如语音通话、视频会议）。  
  **缺点**：不稳定，数据易丢失。  

![image-20230608162934982.png](https://obsidian-1321127127.cos.ap-beijing.myqcloud.com/image-20230608162934982.png)"
"TCP是如何保证传输可靠性的？","TCP（传输控制协议）通过以下机制来保证可靠传输：  

1. **应答机制**：发送方在发送数据包后，会等待接收方的确认应答。如果发送方没有收到确认应答，就会重新发送数据包，直到收到确认为止。  
2. **序列号和确认号**：TCP将每个数据包都赋予一个唯一的序列号，接收方收到数据包后会发送一个确认应答，并指定下一个期望接收的数据的序列号。发送方根据接收方的确认号知道哪些数据已经成功发送并被接收。  
3. **滑动窗口**：发送方将数据分割为多个小的数据段，并使用滑动窗口的机制进行发送。接收方通过确认号告诉发送方数据被接收，发送方可以根据确认号调整滑动窗口的大小和发送速率。  
4. **重传机制**：如果发送方在一定时间内未收到确认应答，就会认为数据包丢失，并进行重传。接收方在收到重复的数据包时会丢弃重复的数据，确保只有一个副本被交付给上层应用。  
5. **流量控制**：TCP使用滑动窗口的机制来控制发送方发送数据的速率，避免发送过多的数据导致接收方无法及时处理或丢失数据。  
6. **拥塞控制**：TCP根据网络的拥塞程度动态调整发送方的发送速率，避免过多的数据流入网络导致拥塞。TCP使用拥塞窗口大小和重传超时时间等参数来判断网络的拥塞情况，并采取相应的措施，如减小发送速率或等待较长时间进行重传。"
"OSI网络模型分为哪几层？每层的名称、作用、协议和关键词是什么？","| 层级 | 名称       | 作用                                             | 协议                                        | 关键词                 |
| ---- | ---------- | ------------------------------------------------ | ------------------------------------------- | ---------------------- |
| 7    | **应用层** | 各类网络服务                                     | **HTTP、FTP**                               |                        |
| 6    | 表示层     | 数据编码、格式转换、加密                         | LPP、NBSSP                                  |                        |
| 5    | 会话层     | 维护会话                                         | SSL、TLS、DAP、LDAP                         |                        |
| 4    | **传输层** | 建立主机端到端的连接（应用间的通信）             | **TCP、UDP**                                | 端口号、TCP、UDP       |
| 3    | **网络层** | 路由选择，控制数据包在设备间的转发（主机间通信） | **IP、ICMP、路由器、**RIP、IGMP、OSPF       | IP地址、路由器、ping通 |
| 2    | 数据链路层 | 将比特流封装成数据帧（数据帧、网卡间通信）       | **ARP**、**网卡**、交换机、PPTP、L2TP、ATMP | MAC地址、网卡          |
| 1    | 物理层     | 定义电平、传输介质、物理接口                     | 光纤、集线器、中继器等物理器件              |                        |"
"TCP三次握手的作用是什么？发生在哪个阶段？","tcp的三次挥手的作用是保证 通信双方都能够正常的收发信息；三次握手的发生阶段是在客户端连接服务器的connect阶段开始的  
1. 公安局：你好！陈某，听得到吗？（一次会话）  
2. 陈某：听到了，王哥，你能听到吗 （二次会话）  
3. 公安局：听到了，你过来自首吧 （开始会话）（三次会话）  

1. 第一次握手 客户端发起SYN包  
2. 第二次握手 服务器收到后，回复SYN+ACK包  
3. 第三次握手 客户端收到后，回复ACK包  

有人可能会很疑惑为什么要进行第三次握手？  
主要原因：防止已经失效的连接请求报文突然又传送到了服务器，从而客户端建立1个连接，服务器建立2个连接  
1. 第一次握手： 客户端向服务器端发送报文  
证明客户端的发送能力正常  
2. 第二次握手：服务器端接收到报文并向客户端发送报文  
证明服务器端的接收能力、发送能力正常  
3. 第三次握手：客户端向服务器发送报文  
证明客户端的接收能力正常  

如果采用两次握手会出现以下情况：  
客户端向服务器端发送的请求报文由于网络等原因滞留，未能发送到服务器端，此时连接请求报文失效，客户端会再次向服务器端发送请求报文，之后与服务器端建立连接，当连接释放后，由于网络通畅了，第一次客户端发送的请求报文又突然到达了服务器端，这条请求报文本该失效了，但此时服务器端误认为客户端又发送了一次连接请求，两次握手建立好连接，此时客户端忽略服务器端发来的确认，也不发送数据，造成不必要的错误和网络资源的浪费。  

---"
